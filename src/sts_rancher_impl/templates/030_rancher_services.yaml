etl:
  datasources:
    - name: ComponentClass
      module: stackstate_etl.model.stackstate
      cls: Component
      init: "Component"
  queries:
    - name: rancher_services
      query: "rancher.get_resource_from_all_projects('services')"
      template_refs:
        - rancher_service_template
        - rancher_service_status_template
        - rancher_loadbalancer_service_config_template
  template:
    components:
      - name: rancher_service_template
        spec:
          name: "$.name"
          type: |
            ctype = 'rancher-service' if item['type'] != 'loadBalancerService' else 'rancher-loadbalancer-service'
            ctype
          uid: "|uid('rancher', 'service', item['id'])"
          layer: |
            layer = 'Rancher Services' if item['type'] != 'loadBalancerService' else 'Rancher LB Services'
            layer
          domain: "$.project_name"
          labels: |
            labels = []
            for k, v in item["launchConfig"]["labels"].items():
              labels.append("%s:%s" % (k,v))
            labels
          custom_properties:
            currentScale: "$.currentScale"
    processors:
      - name: rancher_loadbalancer_service_config_template
        selector: "|item['type'] == 'loadBalancerService'"
        code: |
          lb_component = factory.get_component(uid('rancher', 'service', item['id']))
          port_rules = item["lbConfig"]["portRules"]
          for port_rule in port_rules:
              if port_rule.get("hostname", None) is None:
                target_uid = uid('rancher', 'service', port_rule['serviceId'])
                if not factory.relation_exists(lb_component.uid, target_uid):
                  relation = factory.add_relation(lb_component.uid, target_uid)
                else:
                  rel_id = "%s --> %s" % (lb_component.uid, target_uid)
                  relation = factory.relations[rel_id]
                rel_port_rules = relation.properties.setdefault("port_rules", [])
                rel_port_rules.append(port_rule)
              else:
                serverside_name = port_rule["hostname"]
                serverside_uid = factory.get_uid("host", "virtual:server", serverside_name)
                if not factory.component_exists(serverside_uid):
                    serverside_component = ComponentClass()
                    serverside_component.uid = serverside_uid
                    serverside_component.set_type("virtual-server")
                    serverside_component.set_name(serverside_name)
                    serverside_component.properties.layer = "Virtual Servers"
                    serverside_component.properties.domain = item["project_name"]
                    serverside_component.properties.add_identifier(serverside_uid)
                    factory.add_component(serverside_component)
                if not factory.relation_exists(serverside_uid, lb_component.uid):
                  relation = factory.add_relation(serverside_uid, lb_component.uid)
                target_uid = uid('rancher', 'service', port_rule['serviceId'])
                if not factory.relation_exists(serverside_uid, target_uid):
                  relation = factory.add_relation(serverside_uid, target_uid)
    health:
      - name: rancher_service_status_template
        spec:
          check_id: "|'rancher_service_%s_status' % item['id']"
          check_name: "ServiceState"
          topo_identifier: "|uid('rancher', 'service', item['id'])"
          health: |
            if item["state"] == "active":
              if item["healthState"] == "healthy":
                state = "CLEAR"
              else:
                state = "DEVIATING"
                health.message = item["healthState"]
            else:
              state = "CRITICAL"
              health.message = item['state']
            state

